Java with Spring Boot

Set Up
Spring Web
MySQL Driver
Spring Data JPA
Spring Boot Dev Tools

class Order

package CompanyStore.io.order;

import java.util.Date;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "orders")
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int order_no;
    private String sku;
    private int shipped_qty;
    private String status;
    private Date ship_date;
    private Date delivered_date;
    private String transporter;
    private int transporter_code;
    private String channel;

    @ManyToOne
    @JoinColumn(name = "customer_id")
    private Customer customer;

	public int getOrder_no() {
		return order_no;
	}

	public void setOrder_no(int order_no) {
		this.order_no = order_no;
	}

	public String getSku() {
		return sku;
	}

	public void setSku(String sku) {
		this.sku = sku;
	}

	public int getShipped_qty() {
		return shipped_qty;
	}

	public void setShipped_qty(int shipped_qty) {
		this.shipped_qty = shipped_qty;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public Date getShip_date() {
		return ship_date;
	}

	public void setShip_date(Date ship_date) {
		this.ship_date = ship_date;
	}

	public Date getDelivered_date() {
		return delivered_date;
	}

	public void setDelivered_date(Date delivered_date) {
		this.delivered_date = delivered_date;
	}

	public String getTransporter() {
		return transporter;
	}

	public void setTransporter(String transporter) {
		this.transporter = transporter;
	}

	public int getTransporter_code() {
		return transporter_code;
	}

	public void setTransporter_code(int transporter_code) {
		this.transporter_code = transporter_code;
	}

	public String getChannel() {
		return channel;
	}

	public void setChannel(String channel) {
		this.channel = channel;
	}

	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

    
}



class OrderController

package CompanyStore.io.order;

import CompanyStore.io.order.*;
//import com.example.demo.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/orders")
public class OrderController {

    @Autowired
    private OrderService orderService;

    @GetMapping
    public List<Order> getAllOrders() {
        return orderService.getAllOrders();
    }

    @GetMapping("/{orderNo}")
    public ResponseEntity<Order> getOrderById(@PathVariable int orderNo) {
        Optional<Order> order = orderService.getOrderById(orderNo);
        return order.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Order> createOrder(@RequestBody Order order) {
        Order createdOrder = orderService.createOrder(order);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdOrder);
    }

    @PutMapping("/{orderNo}")
    public ResponseEntity<Order> updateOrder(@PathVariable int orderNo, @RequestBody Order orderDetails) {
        Order updatedOrder = orderService.updateOrder(orderNo, orderDetails);
        return ResponseEntity.ok(updatedOrder);
    }

    @DeleteMapping("/{orderNo}")
    public ResponseEntity<Void> deleteOrder(@PathVariable int orderNo) {
        orderService.deleteOrder(orderNo);
        return ResponseEntity.noContent().build();
    }
}



OrderRepository

package CompanyStore.io.order;

import CompanyStore.io.order.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface OrderRepository extends JpaRepository<Order, Integer> {
}



OrderService

package CompanyStore.io.order;

//package com.example.demo.service;

import CompanyStore.io.order.*;
//import CompanyStore.io.order.repository.OrderRepository;
//import CompanyStore.io.order.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private CustomerRepository customerRepository;

    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    public Optional<Order> getOrderById(int orderNo) {
        return orderRepository.findById(orderNo);
    }

    public Order createOrder(Order order) {
        return orderRepository.save(order);
    }

    public Order updateOrder(int orderNo, Order orderDetails) {
        Order order = orderRepository.findById(orderNo)
                .orElseThrow(() -> new RuntimeException("Order not found with id " + orderNo));

        order.setSku(orderDetails.getSku());
        order.setShipped_qty(orderDetails.getShipped_qty());
        order.setStatus(orderDetails.getStatus());
        order.setShip_date(orderDetails.getShip_date());
        order.setDelivered_date(orderDetails.getDelivered_date());
        order.setTransporter(orderDetails.getTransporter());
        order.setTransporter_code(orderDetails.getTransporter_code());
        order.setChannel(orderDetails.getChannel());
        order.setCustomer(orderDetails.getCustomer());

        return orderRepository.save(order);
    }

    public void deleteOrder(int orderNo) {
        orderRepository.deleteById(orderNo);
    }
}



Class Customer

package CompanyStore.io.order;

import java.util.List;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@Table(name = "customers")
public class Customer {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private String email;
    private String phone;
    private String address;

    @OneToMany(mappedBy = "customer")
    private List<Order> orders;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public List<Order> getOrders() {
		return orders;
	}

	public void setOrders(List<Order> orders) {
		this.orders = orders;
	}

    
}






CustomerController




package CompanyStore.io.order;


import CompanyStore.io.order.*;
//import com.example.demo.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/customers")
public class CustomerController {

    @Autowired
    private CustomerService customerService;

    @GetMapping
    public List<Customer> getAllCustomers() {
        return customerService.getAllCustomers();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Customer> getCustomerById(@PathVariable int id) {
        Optional<Customer> customer = customerService.getCustomerById(id);
        return customer.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
        Customer createdCustomer = customerService.createCustomer(customer);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Customer> updateCustomer(@PathVariable int id, @RequestBody Customer customerDetails) {
        Customer updatedCustomer = customerService.updateCustomer(id, customerDetails);
        return ResponseEntity.ok(updatedCustomer);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCustomer(@PathVariable int id) {
        customerService.deleteCustomer(id);
        return ResponseEntity.noContent().build();
    }
}



CustomerRepository

package CompanyStore.io.order;

import CompanyStore.io.order.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CustomerRepository extends JpaRepository<Customer, Integer> {
}



CustomerService

package CompanyStore.io.order;


import CompanyStore.io.order.*;
//import com.example.demo.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class CustomerService {

    @Autowired
    private CustomerRepository customerRepository;

    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    public Optional<Customer> getCustomerById(int id) {
        return customerRepository.findById(id);
    }

    public Customer createCustomer(Customer customer) {
        return customerRepository.save(customer);
    }

    public Customer updateCustomer(int id, Customer customerDetails) {
        Customer customer = customerRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Customer not found with id " + id));

        customer.setName(customerDetails.getName());
        customer.setEmail(customerDetails.getEmail());
        customer.setPhone(customerDetails.getPhone());
        customer.setAddress(customerDetails.getAddress());

        return customerRepository.save(customer);
    }

    public void deleteCustomer(int id) {
        customerRepository.deleteById(id);
    }
}




Application Properties
spring.datasource.url=jdbc:mysql://localhost:3306/order_management
spring.datasource.username=root
spring.datasource.password=Likhith@0817
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true



Other
#spring.application.name=Order_Management
## Server configuration
#server.port=8080
#
## Database configuration
#spring.datasource.url=jdbc:mysql://localhost:3306/order_management
#spring.datasource.username=root
#spring.datasource.password=Likhith@0817
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.hibernate.ddl-auto=update
#
## Hibernate Configuration
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#spring.jpa.show-sql=true
#
## Logging Configuration
#logging.level.org.springframework.web=DEBUG
#logging.level.com.example.ordermanagement=DEBUG
#
## Custom application properties
#app.orders.default-status=Pending
#app.orders.max-entries-per-page=20




DATABASE

CUSTOMERS


CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address TEXT
);


ORDERS
CREATE TABLE orders (
    order_no INT AUTO_INCREMENT PRIMARY KEY,
    sku VARCHAR(50) NOT NULL,
    shipped_qty INT NOT NULL,
    status VARCHAR(50),
    ship_date DATE,
    delivered_date DATE,
    transporter VARCHAR(50),
    transporter_code INT,
    channel VARCHAR(50),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);



Insert Customers

INSERT INTO customers (name, email, phone, address)
VALUES
('John Doe', 'john@example.com', '1234567890', '123 Elm St'),
('Jane Smith', 'jane@example.com', '0987654321', '456 Oak St');



Insert Orders

INSERT INTO orders (sku, shipped_qty, status, ship_date, delivered_date, transporter, transporter_code, channel, customer_id)
VALUES
('SKU123', 10, 'Shipped', '2024-08-01', NULL, 'DHL', 12345, 'Online', 1),
('SKU124', 5, 'Delivered', '2024-07-28', '2024-08-02', 'FedEx', 67890, 'Retail', 2);




SELECT * From Customers;

Select * from Orders;

SELECT o.*, c.name, c.email
FROM orders o
JOIN customers c ON o.customer_id = c.id;



Frontend Design


HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Order Management</h1>
        <div class="form-container">
            <form id="orderForm">
                <label for="sku">SKU:</label>
                <input type="text" id="sku" name="sku" required>
                <label for="shipped_qty">Shipped Quantity:</label>
                <input type="number" id="shipped_qty" name="shipped_qty" required>
                <label for="status">Status:</label>
                <input type="text" id="status" name="status" required>
                <label for="ship_date">Ship Date:</label>
                <input type="date" id="ship_date" name="ship_date" required>
                <label for="delivered_date">Delivered Date:</label>
                <input type="date" id="delivered_date" name="delivered_date">
                <label for="transporter">Transporter:</label>
                <input type="text" id="transporter" name="transporter" required>
                <label for="transporter_code">Transporter Code:</label>
                <input type="number" id="transporter_code" name="transporter_code" required>
                <label for="channel">Channel:</label>
                <input type="text" id="channel" name="channel" required>
                <label for="customer_id">Customer ID:</label>
                <input type="number" id="customer_id" name="customer_id" required>
                <button type="submit">Submit</button>
            </form>
        </div>
        <div class="orders-container">
            <h2>Orders</h2>
            <table id="ordersTable">
                <thead>
                    <tr>
                        <th>Order No</th>
                        <th>SKU</th>
                        <th>Shipped Quantity</th>
                        <th>Status</th>
                        <th>Ship Date</th>
                        <th>Delivered Date</th>
                        <th>Transporter</th>
                        <th>Transporter Code</th>
                        <th>Channel</th>
                        <th>Customer ID</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Orders will be populated here -->
                </tbody>
            </table>
        </div>
    </div>
    <script src="scripts.js"></script>
</body>
</html>




CSS
/* styles.css */

body {
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
    color: #343a40;
}

.container {
    width: 80%;
    margin: 0 auto;
    padding: 20px;
    background-color: #ffffff;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    margin-top: 50px;
    border-radius: 8px;
}

h1 {
    text-align: center;
    color: #007bff;
}

h2 {
    text-align: center;
    color: #6c757d;
}

.form-container {
    margin-bottom: 20px;
    padding: 20px;
    background-color: #e9ecef;
    border-radius: 8px;
}

form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

label {
    font-weight: bold;
    color: #495057;
}

input, button {
    padding: 10px;
    font-size: 16px;
    border-radius: 5px;
    border: 1px solid #ced4da;
}

input:focus {
    border-color: #80bdff;
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

button {
    background-color: #007bff;
    color: #ffffff;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0056b3;
}

.orders-container {
    padding: 20px;
    background-color: #e9ecef;
    border-radius: 8px;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #dee2e6;
}

th, td {
    padding: 15px;
    text-align: left;
}

th {
    background-color: #007bff;
    color: #ffffff;
}

tbody tr:nth-child(even) {
    background-color: #f8f9fa;
}

tbody tr:hover {
    background-color: #e2e6ea;
}



JS

// scripts.js

document.addEventListener('DOMContentLoaded', () => {
    fetchOrders();

    const orderForm = document.getElementById('orderForm');
    orderForm.addEventListener('submit', event => {
        event.preventDefault();
        const formData = new FormData(orderForm);
        const order = Object.fromEntries(formData);
        createOrder(order);
    });
});

function fetchOrders() {
    fetch('http://localhost:8080/api/orders')
        .then(response => response.json())
        .then(data => {
            const ordersTableBody = document.querySelector('#ordersTable tbody');
            ordersTableBody.innerHTML = '';
            data.forEach(order => {
                const row = document.createElement('tr');
                Object.values(order).forEach(value => {
                    const cell = document.createElement('td');
                    cell.textContent = value;
                    row.appendChild(cell);
                });
                ordersTableBody.appendChild(row);
            });
        })
        .catch(error => console.error('Error fetching orders:', error));
}

function createOrder(order) {
    fetch('http://localhost:8080/api/orders', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(order),
    })
    .then(response => {
        if (response.ok) {
            fetchOrders();
            document.getElementById('orderForm').reset();
        } else {
            console.error('Error creating order:', response.statusText);
        }
    })
    .catch(error => console.error('Error creating order:', error));
}



POSTMAN OPERATIONS

2. Configure Postman to Test Your API
Create a Collection
Open Postman.
Create a new collection to organize your requests (optional but recommended).
Add Requests to the Collection
Get All Orders

Method: GET
URL: http://localhost:8080/api/orders
Click Send to fetch all orders.
Create a New Order

Method: POST
URL: http://localhost:8080/api/orders
Body: Select raw and JSON format.
Example JSON Body:
json
Copy code
{
    "sku": "12345",
    "shippedQty": 10,
    "status": "Shipped",
    "shipDate": "2024-08-05",
    "deliveredDate": "2024-08-10",
    "transporter": "DHL",
    "transporterCode": 98765,
    "channel": "Online",
    "customerId": 1001
}
Click Send to create a new order.
Update an Order

Method: PUT (if you have implemented update functionality in your backend)
URL: http://localhost:8080/api/orders/{orderNo}
Body: Select raw and JSON format.
Example JSON Body (similar to the create request):
json
Copy code
{
    "sku": "12345",
    "shippedQty": 10,
    "status": "Delivered",
    "shipDate": "2024-08-05",
    "deliveredDate": "2024-08-10",
    "transporter": "DHL",
    "transporterCode": 98765,
    "channel": "Online",
    "customerId": 1001
}
Click Send to update an order.
Delete an Order

Method: DELETE (if you have implemented delete functionality in your backend)
URL: http://localhost:8080/api/orders/{orderNo}
Click Send to delete an order.
3. Verify Responses
Ensure that the responses from the API match your expectations.
Check for correct status codes (e.g., 200 OK for successful requests, 201 Created for successful POST requests).
Inspect the response body to make sure it contains the expected data.
Example API Endpoints and Responses
Get All Orders

Request:
bash
Copy code
GET /api/orders
Response:
json
Copy code
[
    {
        "orderNo": 1,
        "sku": "12345",
        "shippedQty": 10,
        "status": "Shipped",
        "shipDate": "2024-08-05",
        "deliveredDate": "2024-08-10",
        "transporter": "DHL",
        "transporterCode": 98765,
        "channel": "Online",
        "customerId": 1001
    }
]
Create a New Order

Request:
bash
Copy code
POST /api/orders
Body:
json
Copy code
{
    "sku": "12345",
    "shippedQty": 10,
    "status": "Shipped",
    "shipDate": "2024-08-05",
    "deliveredDate": "2024-08-10",
    "transporter": "DHL",
    "transporterCode": 98765,
    "channel": "Online",
    "customerId": 1001
}
Response:
json
Copy code
{
    "orderNo": 2,
    "sku": "12345",
    "shippedQty": 10,
    "status": "Shipped",
    "shipDate": "2024-08-05",
    "deliveredDate": "2024-08-10",
    "transporter": "DHL",
    "transporterCode": 98765,
    "channel": "Online",
    "customerId": 1001
}
Integrate with Your Frontend
Once you have verified that your API works correctly with Postman, you can integrate it with your frontend. Your existing fetchOrders and createOrder JavaScript functions are already set up to interact with the backend.

Here’s a brief recap of those functions:

Fetch Orders
javascript
Copy code
function fetchOrders() {
    fetch('http://localhost:8080/api/orders')
        .then(response => response.json())
        .then(data => {
            const ordersTableBody = document.querySelector('#ordersTable tbody');
            ordersTableBody.innerHTML = '';
            data.forEach(order => {
                const row = document.createElement('tr');
                Object.values(order).forEach(value => {
                    const cell = document.createElement('td');
                    cell.textContent = value;
                    row.appendChild(cell);
                });
                ordersTableBody.appendChild(row);
            });
        })
        .catch(error => console.error('Error fetching orders:', error));
}
Create Order
javascript
Copy code
function createOrder(order) {
    fetch('http://localhost:8080/api/orders', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(order),
    })
    .then(response => {
        if (response.ok) {
            fetchOrders();
            document.getElementById('orderForm').reset();
        } else {
            console.error('Error creating order:', response.statusText);
        }
    })
    .catch(error => console.error('Error creating order:', error));
}
With these steps, your frontend should be able to communicate with your Spring Boot backend effectively.






































README


Great! Since you already have an API to interact with, you can integrate your frontend with this API to perform CRUD operations. I'll guide you through connecting your frontend to this API.

Update Your Frontend to Connect to the API
HTML (No changes needed):
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Order Management</h1>
        <div class="form-container">
            <form id="orderForm">
                <label for="sku">SKU:</label>
                <input type="text" id="sku" name="sku" required>
                <label for="shipped_qty">Shipped Quantity:</label>
                <input type="number" id="shipped_qty" name="shipped_qty" required>
                <label for="status">Status:</label>
                <input type="text" id="status" name="status" required>
                <label for="ship_date">Ship Date:</label>
                <input type="date" id="ship_date" name="ship_date" required>
                <label for="delivered_date">Delivered Date:</label>
                <input type="date" id="delivered_date" name="delivered_date">
                <label for="transporter">Transporter:</label>
                <input type="text" id="transporter" name="transporter" required>
                <label for="transporter_code">Transporter Code:</label>
                <input type="number" id="transporter_code" name="transporter_code" required>
                <label for="channel">Channel:</label>
                <input type="text" id="channel" name="channel" required>
                <label for="customer_id">Customer ID:</label>
                <input type="number" id="customer_id" name="customer_id" required>
                <button type="submit">Submit</button>
            </form>
        </div>
        <div class="orders-container">
            <h2>Orders</h2>
            <table id="ordersTable">
                <thead>
                    <tr>
                        <th>Order No</th>
                        <th>SKU</th>
                        <th>Shipped Quantity</th>
                        <th>Status</th>
                        <th>Ship Date</th>
                        <th>Delivered Date</th>
                        <th>Transporter</th>
                        <th>Transporter Code</th>
                        <th>Channel</th>
                        <th>Customer ID</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Orders will be populated here -->
                </tbody>
            </table>
        </div>
    </div>
    <script src="scripts.js"></script>
</body>
</html>
CSS (styles.css):
css
Copy code
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 0;
}

.container {
    width: 80%;
    margin: 0 auto;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-top: 50px;
}

h1, h2 {
    text-align: center;
}

.form-container {
    margin-bottom: 20px;
}

form {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

label {
    font-weight: bold;
}

input {
    padding: 8px;
    font-size: 16px;
}

button {
    padding: 10px;
    font-size: 16px;
    background-color: #007BFF;
    color: #fff;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 10px;
    text-align: left;
}
JavaScript (scripts.js):
Fetch and display the orders from the API.
Submit new orders to the API.
javascript
Copy code
document.addEventListener('DOMContentLoaded', () => {
    fetchOrders();

    const orderForm = document.getElementById('orderForm');
    orderForm.addEventListener('submit', event => {
        event.preventDefault();
        const formData = new FormData(orderForm);
        const order = Object.fromEntries(formData);
        createOrder(order);
    });
});

function fetchOrders() {
    fetch('https://companystore.vineretail.com/RestWS/api/eretail/v1/order/shipDetail')
        .then(response => response.json())
        .then(data => {
            const ordersTableBody = document.querySelector('#ordersTable tbody');
            ordersTableBody.innerHTML = '';
            data.forEach(order => {
                const row = document.createElement('tr');
                Object.values(order).forEach(value => {
                    const cell = document.createElement('td');
                    cell.textContent = value;
                    row.appendChild(cell);
                });
                ordersTableBody.appendChild(row);
            });
        })
        .catch(error => console.error('Error fetching orders:', error));
}

function createOrder(order) {
    fetch('https://companystore.vineretail.com/RestWS/api/eretail/v1/order/shipDetail', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(order),
    })
    .then(response => {
        if (response.ok) {
            fetchOrders();
            document.getElementById('orderForm').reset();
        } else {
            console.error('Error creating order:', response.statusText);
        }
    })
    .catch(error => console.error('Error creating order:', error));
}
Explanation:
Fetching Orders:

The fetchOrders function sends a GET request to the API and populates the table with the returned order data.
Creating Orders:

The createOrder function sends a POST request with the order data collected from the form.
Form Handling:

The form submission is handled by preventing the default form submission, converting the form data to a JSON object, and calling the createOrder function.
This setup should connect your frontend to the existing API and handle order management operations.


















