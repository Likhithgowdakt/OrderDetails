This is for backenc
Yes, it's definitely possible and often necessary to create multiple tables in a database schema, especially for more complex applications. In relational databases, you might use multiple tables to normalize data, establish relationships, and ensure data integrity.

Hereâ€™s a basic example of how to design a schema with two related tables in a Spring Boot application using MySQL. I'll walk you through creating a simple e-commerce system with `Order` and `Customer` tables.

### **1. Define the Database Schema**

Assume we have two tables: `orders` and `customers`. Each order is associated with a customer.

**`orders` Table Schema:**
- `order_no` (Primary Key)
- `sku`
- `shipped_qty`
- `status`
- `ship_date`
- `delivered_date`
- `transporter`
- `transporter_code`
- `channel`
- `customer_id` (Foreign Key referencing `customers.id`)

**`customers` Table Schema:**
- `id` (Primary Key)
- `name`
- `email`
- `phone`
- `address`

### **2. Create the Entity Classes**

**Order Entity**

```java
package com.example.demo.entity;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "orders")
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int order_no;
    private String sku;
    private int shipped_qty;
    private String status;
    private Date ship_date;
    private Date delivered_date;
    private String transporter;
    private int transporter_code;
    private String channel;

    @ManyToOne
    @JoinColumn(name = "customer_id")
    private Customer customer;

    // Getters and Setters
}
```

**Customer Entity**

```java
package com.example.demo.entity;

import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "customers")
public class Customer {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private String email;
    private String phone;
    private String address;

    @OneToMany(mappedBy = "customer")
    private List<Order> orders;

    // Getters and Setters
}
```

### **3. Create the Repository Interfaces**

**OrderRepository**

```java
package com.example.demo.repository;

import com.example.demo.entity.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface OrderRepository extends JpaRepository<Order, Integer> {
}
```

**CustomerRepository**

```java
package com.example.demo.repository;

import com.example.demo.entity.Customer;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CustomerRepository extends JpaRepository<Customer, Integer> {
}
```

### **4. Update the Service Layer**

**OrderService**

```java
package com.example.demo.service;

import com.example.demo.entity.Order;
import com.example.demo.entity.Customer;
import com.example.demo.repository.OrderRepository;
import com.example.demo.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private CustomerRepository customerRepository;

    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    public Optional<Order> getOrderById(int orderNo) {
        return orderRepository.findById(orderNo);
    }

    public Order createOrder(Order order) {
        return orderRepository.save(order);
    }

    public Order updateOrder(int orderNo, Order orderDetails) {
        Order order = orderRepository.findById(orderNo)
                .orElseThrow(() -> new RuntimeException("Order not found with id " + orderNo));

        order.setSku(orderDetails.getSku());
        order.setShipped_qty(orderDetails.getShipped_qty());
        order.setStatus(orderDetails.getStatus());
        order.setShip_date(orderDetails.getShip_date());
        order.setDelivered_date(orderDetails.getDelivered_date());
        order.setTransporter(orderDetails.getTransporter());
        order.setTransporter_code(orderDetails.getTransporter_code());
        order.setChannel(orderDetails.getChannel());
        order.setCustomer(orderDetails.getCustomer());

        return orderRepository.save(order);
    }

    public void deleteOrder(int orderNo) {
        orderRepository.deleteById(orderNo);
    }
}
```

**CustomerService**

```java
package com.example.demo.service;

import com.example.demo.entity.Customer;
import com.example.demo.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class CustomerService {

    @Autowired
    private CustomerRepository customerRepository;

    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    public Optional<Customer> getCustomerById(int id) {
        return customerRepository.findById(id);
    }

    public Customer createCustomer(Customer customer) {
        return customerRepository.save(customer);
    }

    public Customer updateCustomer(int id, Customer customerDetails) {
        Customer customer = customerRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Customer not found with id " + id));

        customer.setName(customerDetails.getName());
        customer.setEmail(customerDetails.getEmail());
        customer.setPhone(customerDetails.getPhone());
        customer.setAddress(customerDetails.getAddress());

        return customerRepository.save(customer);
    }

    public void deleteCustomer(int id) {
        customerRepository.deleteById(id);
    }
}
```

### **5. Update the Controller Layer**

**OrderController**

```java
package com.example.demo.controller;

import com.example.demo.entity.Order;
import com.example.demo.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/orders")
public class OrderController {

    @Autowired
    private OrderService orderService;

    @GetMapping
    public List<Order> getAllOrders() {
        return orderService.getAllOrders();
    }

    @GetMapping("/{orderNo}")
    public ResponseEntity<Order> getOrderById(@PathVariable int orderNo) {
        Optional<Order> order = orderService.getOrderById(orderNo);
        return order.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Order> createOrder(@RequestBody Order order) {
        Order createdOrder = orderService.createOrder(order);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdOrder);
    }

    @PutMapping("/{orderNo}")
    public ResponseEntity<Order> updateOrder(@PathVariable int orderNo, @RequestBody Order orderDetails) {
        Order updatedOrder = orderService.updateOrder(orderNo, orderDetails);
        return ResponseEntity.ok(updatedOrder);
    }

    @DeleteMapping("/{orderNo}")
    public ResponseEntity<Void> deleteOrder(@PathVariable int orderNo) {
        orderService.deleteOrder(orderNo);
        return ResponseEntity.noContent().build();
    }
}
```

**CustomerController**

```java
package com.example.demo.controller;

import com.example.demo.entity.Customer;
import com.example.demo.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/customers")
public class CustomerController {

    @Autowired
    private CustomerService customerService;

    @GetMapping
    public List<Customer> getAllCustomers() {
        return customerService.getAllCustomers();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Customer> getCustomerById(@PathVariable int id) {
        Optional<Customer> customer = customerService.getCustomerById(id);
        return customer.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
        Customer createdCustomer = customerService.createCustomer(customer);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Customer> updateCustomer(@PathVariable int id, @RequestBody Customer customerDetails) {
        Customer updatedCustomer = customerService.updateCustomer(id, customerDetails);
        return ResponseEntity.ok(updatedCustomer);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCustomer(@PathVariable int id) {
        customerService.deleteCustomer(id);
        return ResponseEntity.noContent().build();
    }
}
```

### **6. Testing Your API**

You can use Postman or any API client to test the CRUD operations for both `Order` and `Customer` entities.

- **Orders API:**
  - `GET /api/orders`
  - `GET /api/orders/{orderNo}`
  - `POST /api/orders` (with order details in the body)
  - `PUT /api/orders/{orderNo}` (with updated order details in the body)
  - `DELETE /api/orders/{orderNo}`

- **Customers API:**
  - `GET /api/customers`
  - `GET /api/customers/{id}`
  - `POST /api/customers` (with customer details in the body)
  - `PUT /api/customers/{id}` (with updated customer details in the body)
  - `DELETE /api/customers/{id}`

This setup demonstrates a basic relationship between `Order` and `Customer` tables in a Spring Boot application with MySQL. Adjust the entities, services, and controllers according to your specific requirements and business logic.

















This is for DB

Certainly! Here are the MySQL queries to create and manage the `orders` and `customers` tables, including the schema design and CRUD operations.

### **1. Create the Tables**

**`customers` Table**

```sql
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address TEXT
);
```

**`orders` Table**

```sql
CREATE TABLE orders (
    order_no INT AUTO_INCREMENT PRIMARY KEY,
    sku VARCHAR(50) NOT NULL,
    shipped_qty INT NOT NULL,
    status VARCHAR(50),
    ship_date DATE,
    delivered_date DATE,
    transporter VARCHAR(50),
    transporter_code INT,
    channel VARCHAR(50),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
```

### **2. Insert Records**

**Insert into `customers`**

```sql
INSERT INTO customers (name, email, phone, address) 
VALUES ('John Doe', 'john.doe@example.com', '123-456-7890', '123 Main St, Anytown, USA'),
       ('Jane Smith', 'jane.smith@example.com', '987-654-3210', '456 Elm St, Othertown, USA');
```

**Insert into `orders`**

```sql
INSERT INTO orders (sku, shipped_qty, status, ship_date, delivered_date, transporter, transporter_code, channel, customer_id) 
VALUES ('SKU12345', 10, 'Shipped', '2024-07-01', '2024-07-05', 'FedEx', 123, 'Online', 1),
       ('SKU67890', 5, 'Delivered', '2024-06-15', '2024-06-20', 'UPS', 456, 'In-Store', 2);
```

### **3. Read Records**

**Select All from `customers`**

```sql
SELECT * FROM customers;
```

**Select All from `orders`**

```sql
SELECT * FROM orders;
```

**Select Orders by Customer**

```sql
SELECT * FROM orders WHERE customer_id = 1;
```

**Join Orders with Customers**

```sql
SELECT o.order_no, o.sku, o.shipped_qty, o.status, c.name AS customer_name
FROM orders o
JOIN customers c ON o.customer_id = c.id;
```

### **4. Update Records**

**Update a Customer**

```sql
UPDATE customers 
SET phone = '111-222-3333', address = '789 Pine St, Newtown, USA'
WHERE id = 1;
```

**Update an Order**

```sql
UPDATE orders 
SET status = 'In Transit', ship_date = '2024-07-02'
WHERE order_no = 1;
```

### **5. Delete Records**

**Delete a Customer**

```sql
DELETE FROM customers 
WHERE id = 1;
```

**Delete an Order**

```sql
DELETE FROM orders 
WHERE order_no = 1;
```

### **6. Additional Queries**

**Find Orders Shipped in a Specific Month**

```sql
SELECT * FROM orders 
WHERE MONTH(ship_date) = 7 AND YEAR(ship_date) = 2024;
```

**Count Orders per Customer**

```sql
SELECT customer_id, COUNT(*) AS order_count
FROM orders
GROUP BY customer_id;
```

**Find Customers with No Orders**

```sql
SELECT c.*
FROM customers c
LEFT JOIN orders o ON c.id = o.customer_id
WHERE o.customer_id IS NULL;
```

These queries should help you manage the `orders` and `customers` tables in MySQL, including creating, reading, updating, and deleting records. Adjust the queries based on your actual table structure and requirements.









This is for FrontEnd


HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Order Management System</h1>

    <div id="customer-form">
        <h2>Customer</h2>
        <input type="hidden" id="customer-id">
        <label for="customer-name">Name:</label>
        <input type="text" id="customer-name">
        <label for="customer-email">Email:</label>
        <input type="email" id="customer-email">
        <label for="customer-phone">Phone:</label>
        <input type="text" id="customer-phone">
        <label for="customer-address">Address:</label>
        <textarea id="customer-address"></textarea>
        <button onclick="createCustomer()">Create Customer</button>
        <button onclick="updateCustomer()">Update Customer</button>
    </div>

    <div id="order-form">
        <h2>Order</h2>
        <input type="hidden" id="order-no">
        <label for="order-sku">SKU:</label>
        <input type="text" id="order-sku">
        <label for="order-shipped-qty">Shipped Quantity:</label>
        <input type="number" id="order-shipped-qty">
        <label for="order-status">Status:</label>
        <input type="text" id="order-status">
        <label for="order-ship-date">Ship Date:</label>
        <input type="date" id="order-ship-date">
        <label for="order-delivered-date">Delivered Date:</label>
        <input type="date" id="order-delivered-date">
        <label for="order-transporter">Transporter:</label>
        <input type="text" id="order-transporter">
        <label for="order-transporter-code">Transporter Code:</label>
        <input type="number" id="order-transporter-code">
        <label for="order-channel">Channel:</label>
        <input type="text" id="order-channel">
        <label for="order-customer-id">Customer ID:</label>
        <input type="number" id="order-customer-id">
        <button onclick="createOrder()">Create Order</button>
        <button onclick="updateOrder()">Update Order</button>
    </div>

    <h2>Records</h2>
    <button onclick="fetchCustomers()">Fetch Customers</button>
    <button onclick="fetchOrders()">Fetch Orders</button>
    
    <div id="results"></div>

    <script src="scripts.js"></script>
</body>
</html>









CSS

body {
    font-family: Arial, sans-serif;
    padding: 20px;
}

h1 {
    text-align: center;
}

#customer-form, #order-form {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-top: 10px;
}

input, textarea {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
}

button {
    margin-top: 10px;
    padding: 10px 20px;
    background-color: #007BFF;
    color: #fff;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

#results {
    margin-top: 20px;
}


JS
const API_URL = 'http://localhost:8080'; // Adjust this URL to match your backend API

// Helper function to make AJAX requests
async function makeRequest(method, endpoint, data) {
    try {
        const response = await fetch(`${API_URL}/${endpoint}`, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        return response.json();
    } catch (error) {
        console.error('Error:', error);
    }
}

// Create a customer
async function createCustomer() {
    const name = document.getElementById('customer-name').value;
    const email = document.getElementById('customer-email').value;
    const phone = document.getElementById('customer-phone').value;
    const address = document.getElementById('customer-address').value;

    await makeRequest('POST', 'customers', { name, email, phone, address });
    fetchCustomers(); // Refresh the list
}

// Update a customer
async function updateCustomer() {
    const id = document.getElementById('customer-id').value;
    const name = document.getElementById('customer-name').value;
    const email = document.getElementById('customer-email').value;
    const phone = document.getElementById('customer-phone').value;
    const address = document.getElementById('customer-address').value;

    await makeRequest('PUT', `customers/${id}`, { name, email, phone, address });
    fetchCustomers(); // Refresh the list
}

// Create an order
async function createOrder() {
    const sku = document.getElementById('order-sku').value;
    const shippedQty = document.getElementById('order-shipped-qty').value;
    const status = document.getElementById('order-status').value;
    const shipDate = document.getElementById('order-ship-date').value;
    const deliveredDate = document.getElementById('order-delivered-date').value;
    const transporter = document.getElementById('order-transporter').value;
    const transporterCode = document.getElementById('order-transporter-code').value;
    const channel = document.getElementById('order-channel').value;
    const customerId = document.getElementById('order-customer-id').value;

    await makeRequest('POST', 'orders', { sku, shippedQty, status, shipDate, deliveredDate, transporter, transporterCode, channel, customerId });
    fetchOrders(); // Refresh the list
}

// Update an order
async function updateOrder() {
    const orderNo = document.getElementById('order-no').value;
    const sku = document.getElementById('order-sku').value;
    const shippedQty = document.getElementById('order-shipped-qty').value;
    const status = document.getElementById('order-status').value;
    const shipDate = document.getElementById('order-ship-date').value;
    const deliveredDate = document.getElementById('order-delivered-date').value;
    const transporter = document.getElementById('order-transporter').value;
    const transporterCode = document.getElementById('order-transporter-code').value;
    const channel = document.getElementById('order-channel').value;
    const customerId = document.getElementById('order-customer-id').value;

    await makeRequest('PUT', `orders/${orderNo}`, { sku, shippedQty, status, shipDate, deliveredDate, transporter, transporterCode, channel, customerId });
    fetchOrders(); // Refresh the list
}

// Fetch all customers
async function fetchCustomers() {
    const data = await makeRequest('GET', 'customers');
    displayResults(data, 'customers');
}

// Fetch all orders
async function fetchOrders() {
    const data = await makeRequest('GET', 'orders');
    displayResults(data, 'orders');
}

// Display results in the HTML
function displayResults(data, type) {
    const resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = `<h3>${type.charAt(0).toUpperCase() + type.slice(1)}</h3>`;

    if (data.length === 0) {
        resultsDiv.innerHTML += '<p>No records found.</p>';
        return;
    }

    const table = document.createElement('table');
    const thead = document.createElement('thead');
    const tbody = document.createElement('tbody');

    // Add headers
    let headers = Object.keys(data[0]);
    thead.innerHTML = `<tr>${headers.map(header => `<th>${header}</th>`).join('')}</tr>`;

    // Add rows
    data.forEach(record => {
        tbody.innerHTML += `<tr>${headers.map(header => `<td>${record[header]}</td>`).join('')}</tr>`;
    });

    table.appendChild(thead);
    table.appendChild(tbody);
    resultsDiv.appendChild(table);
}
